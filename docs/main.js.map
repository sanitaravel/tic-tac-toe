{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/* ---------- Theme Handling ---------- */\r\nconst themeToggle = document.getElementById('theme-toggle') as HTMLInputElement | null;\r\nif (themeToggle) {\r\n    themeToggle.addEventListener('change', () => {\r\n        document.body.classList.toggle('dark-theme', themeToggle.checked);\r\n    });\r\n}\r\n\r\n/* ---------- Win Overlay Handling ---------- */\r\nconst winOverlay = document.getElementById('win-overlay');\r\nif (winOverlay) {\r\n    winOverlay.addEventListener('click', () => {\r\n        winOverlay.style.display = 'none';\r\n    });\r\n}\r\n\r\n/* ---------- Game State & Local Storage ---------- */\r\nlet gameOver = false;\r\nlet currentMove: 'X' | 'O' = 'X';\r\nconst tiles = document.querySelectorAll<HTMLButtonElement>('.board button[data-index]');\r\n\r\nfunction updateLocalStorage() {\r\n    const board = Array.from(tiles).map(tile => tile.innerText);\r\n    const state = { board, currentMove, gameOver };\r\n    localStorage.setItem('ticTacToeState', JSON.stringify(state));\r\n}\r\n\r\nfunction updateCurrentMoveDisplay() {\r\n    const moveElement = document.getElementById('current-move');\r\n    if (moveElement) {\r\n        moveElement.innerText = `Current move: ${currentMove}`;\r\n    }\r\n}\r\n\r\n/* Restore saved state, if any */\r\nconst savedState = localStorage.getItem('ticTacToeState');\r\nif (savedState) {\r\n    try {\r\n        const { board, currentMove: savedCurrentMove, gameOver: savedGameOver } = JSON.parse(savedState);\r\n        gameOver = savedGameOver;\r\n        currentMove = savedCurrentMove;\r\n        board.forEach((value: string, index: number) => {\r\n            tiles[index].innerText = value;\r\n        });\r\n        if (gameOver) {\r\n            tiles.forEach(t => t.disabled = true);\r\n        }\r\n    } catch (e) {\r\n        console.error('Error parsing saved state', e);\r\n    }\r\n}\r\nupdateCurrentMoveDisplay();\r\n\r\n/* ---------- Overlay Helper Function ---------- */\r\nfunction showOverlay(message: string) {\r\n    const winOverlay = document.getElementById('win-overlay');\r\n    const winMessage = document.getElementById('win-message');\r\n    if (winOverlay && winMessage) {\r\n        winMessage.innerText = message;\r\n        winOverlay.style.display = 'flex';\r\n    }\r\n    tiles.forEach(t => t.disabled = true);\r\n}\r\n\r\n/* ---------- Tile Event Handlers ---------- */\r\ntiles.forEach(tile => {\r\n    tile.addEventListener('mouseenter', () => {\r\n        if (gameOver) return;\r\n        if (!tile.innerText) {\r\n            tile.innerText = currentMove;\r\n            tile.classList.add('preview');\r\n        }\r\n    });\r\n    tile.addEventListener('mouseleave', () => {\r\n        if (gameOver) return;\r\n        if (tile.classList.contains('preview')) {\r\n            tile.innerText = '';\r\n            tile.classList.remove('preview');\r\n        }\r\n    });\r\n    tile.addEventListener('click', () => {\r\n        if (gameOver) return;\r\n        if (!tile.classList.contains('preview')) return;\r\n        \r\n        tile.classList.remove('preview');\r\n        // Commit the move & toggle player.\r\n        currentMove = currentMove === 'X' ? 'O' : 'X';\r\n        updateCurrentMoveDisplay();\r\n\r\n        const winner = checkWin();\r\n        if (winner) {\r\n            gameOver = true;\r\n            showOverlay(`Player ${winner} wins!`);\r\n        } else {\r\n            const boardFull = Array.from(tiles).every(t => t.innerText !== '');\r\n            if (boardFull) {\r\n                gameOver = true;\r\n                showOverlay(\"Tie! No winner!\");\r\n            }\r\n        }\r\n        updateLocalStorage();\r\n    });\r\n});\r\n\r\n/* ---------- Check Win Function ---------- */\r\nfunction checkWin(): string | null {\r\n    const winningCombinations = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\n    const board = Array.from(tiles).map(tile => tile.innerText);\r\n    for (const combo of winningCombinations) {\r\n        const [a, b, c] = combo;\r\n        if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n            console.log('Winner:', board[a]);\r\n            return board[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/* ---------- Restart Game Handling ---------- */\r\nconst restartBtn = document.getElementById('restart-btn') as HTMLButtonElement | null;\r\nif (restartBtn) {\r\n    restartBtn.addEventListener('click', () => {\r\n        gameOver = false;\r\n        currentMove = 'X';\r\n        tiles.forEach(tile => {\r\n            tile.disabled = false;\r\n            tile.innerText = '';\r\n            tile.classList.remove('preview');\r\n        });\r\n        if (winOverlay) {\r\n            winOverlay.style.display = 'none';\r\n        }\r\n        updateLocalStorage();\r\n        updateCurrentMoveDisplay();\r\n    });\r\n}\r\n"],
  "mappings": "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",
  "names": ["winOverlay"]
}
